// Generated by jextract

package io.ygdrasil.wgpu.internal.jvm.panama;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct WGPUDeviceDescriptor {
 *     const WGPUChainedStruct *nextInChain;
 *     WGPUStringView label;
 *     size_t requiredFeatureCount;
 *     const WGPUFeatureName *requiredFeatures;
 *     const WGPURequiredLimits *requiredLimits;
 *     WGPUQueueDescriptor defaultQueue;
 *     WGPUDeviceLostCallbackInfo deviceLostCallbackInfo;
 *     WGPUUncapturedErrorCallbackInfo uncapturedErrorCallbackInfo;
 * }
 * }
 */
public class WGPUDeviceDescriptor {

    WGPUDeviceDescriptor() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        wgpu_h.C_POINTER.withName("nextInChain"),
        WGPUStringView.layout().withName("label"),
        wgpu_h.C_LONG.withName("requiredFeatureCount"),
        wgpu_h.C_POINTER.withName("requiredFeatures"),
        wgpu_h.C_POINTER.withName("requiredLimits"),
        WGPUQueueDescriptor.layout().withName("defaultQueue"),
        WGPUDeviceLostCallbackInfo.layout().withName("deviceLostCallbackInfo"),
        WGPUUncapturedErrorCallbackInfo.layout().withName("uncapturedErrorCallbackInfo")
    ).withName("WGPUDeviceDescriptor");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout nextInChain$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("nextInChain"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const WGPUChainedStruct *nextInChain
     * }
     */
    public static final AddressLayout nextInChain$layout() {
        return nextInChain$LAYOUT;
    }

    private static final long nextInChain$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const WGPUChainedStruct *nextInChain
     * }
     */
    public static final long nextInChain$offset() {
        return nextInChain$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const WGPUChainedStruct *nextInChain
     * }
     */
    public static MemorySegment nextInChain(MemorySegment struct) {
        return struct.get(nextInChain$LAYOUT, nextInChain$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const WGPUChainedStruct *nextInChain
     * }
     */
    public static void nextInChain(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(nextInChain$LAYOUT, nextInChain$OFFSET, fieldValue);
    }

    private static final GroupLayout label$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("label"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * WGPUStringView label
     * }
     */
    public static final GroupLayout label$layout() {
        return label$LAYOUT;
    }

    private static final long label$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * WGPUStringView label
     * }
     */
    public static final long label$offset() {
        return label$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * WGPUStringView label
     * }
     */
    public static MemorySegment label(MemorySegment struct) {
        return struct.asSlice(label$OFFSET, label$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * WGPUStringView label
     * }
     */
    public static void label(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, label$OFFSET, label$LAYOUT.byteSize());
    }

    private static final OfLong requiredFeatureCount$LAYOUT = (OfLong)$LAYOUT.select(groupElement("requiredFeatureCount"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * size_t requiredFeatureCount
     * }
     */
    public static final OfLong requiredFeatureCount$layout() {
        return requiredFeatureCount$LAYOUT;
    }

    private static final long requiredFeatureCount$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * size_t requiredFeatureCount
     * }
     */
    public static final long requiredFeatureCount$offset() {
        return requiredFeatureCount$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * size_t requiredFeatureCount
     * }
     */
    public static long requiredFeatureCount(MemorySegment struct) {
        return struct.get(requiredFeatureCount$LAYOUT, requiredFeatureCount$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * size_t requiredFeatureCount
     * }
     */
    public static void requiredFeatureCount(MemorySegment struct, long fieldValue) {
        struct.set(requiredFeatureCount$LAYOUT, requiredFeatureCount$OFFSET, fieldValue);
    }

    private static final AddressLayout requiredFeatures$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("requiredFeatures"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const WGPUFeatureName *requiredFeatures
     * }
     */
    public static final AddressLayout requiredFeatures$layout() {
        return requiredFeatures$LAYOUT;
    }

    private static final long requiredFeatures$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const WGPUFeatureName *requiredFeatures
     * }
     */
    public static final long requiredFeatures$offset() {
        return requiredFeatures$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const WGPUFeatureName *requiredFeatures
     * }
     */
    public static MemorySegment requiredFeatures(MemorySegment struct) {
        return struct.get(requiredFeatures$LAYOUT, requiredFeatures$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const WGPUFeatureName *requiredFeatures
     * }
     */
    public static void requiredFeatures(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(requiredFeatures$LAYOUT, requiredFeatures$OFFSET, fieldValue);
    }

    private static final AddressLayout requiredLimits$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("requiredLimits"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const WGPURequiredLimits *requiredLimits
     * }
     */
    public static final AddressLayout requiredLimits$layout() {
        return requiredLimits$LAYOUT;
    }

    private static final long requiredLimits$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const WGPURequiredLimits *requiredLimits
     * }
     */
    public static final long requiredLimits$offset() {
        return requiredLimits$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const WGPURequiredLimits *requiredLimits
     * }
     */
    public static MemorySegment requiredLimits(MemorySegment struct) {
        return struct.get(requiredLimits$LAYOUT, requiredLimits$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const WGPURequiredLimits *requiredLimits
     * }
     */
    public static void requiredLimits(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(requiredLimits$LAYOUT, requiredLimits$OFFSET, fieldValue);
    }

    private static final GroupLayout defaultQueue$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("defaultQueue"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * WGPUQueueDescriptor defaultQueue
     * }
     */
    public static final GroupLayout defaultQueue$layout() {
        return defaultQueue$LAYOUT;
    }

    private static final long defaultQueue$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * WGPUQueueDescriptor defaultQueue
     * }
     */
    public static final long defaultQueue$offset() {
        return defaultQueue$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * WGPUQueueDescriptor defaultQueue
     * }
     */
    public static MemorySegment defaultQueue(MemorySegment struct) {
        return struct.asSlice(defaultQueue$OFFSET, defaultQueue$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * WGPUQueueDescriptor defaultQueue
     * }
     */
    public static void defaultQueue(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, defaultQueue$OFFSET, defaultQueue$LAYOUT.byteSize());
    }

    private static final GroupLayout deviceLostCallbackInfo$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("deviceLostCallbackInfo"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * WGPUDeviceLostCallbackInfo deviceLostCallbackInfo
     * }
     */
    public static final GroupLayout deviceLostCallbackInfo$layout() {
        return deviceLostCallbackInfo$LAYOUT;
    }

    private static final long deviceLostCallbackInfo$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * WGPUDeviceLostCallbackInfo deviceLostCallbackInfo
     * }
     */
    public static final long deviceLostCallbackInfo$offset() {
        return deviceLostCallbackInfo$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * WGPUDeviceLostCallbackInfo deviceLostCallbackInfo
     * }
     */
    public static MemorySegment deviceLostCallbackInfo(MemorySegment struct) {
        return struct.asSlice(deviceLostCallbackInfo$OFFSET, deviceLostCallbackInfo$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * WGPUDeviceLostCallbackInfo deviceLostCallbackInfo
     * }
     */
    public static void deviceLostCallbackInfo(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, deviceLostCallbackInfo$OFFSET, deviceLostCallbackInfo$LAYOUT.byteSize());
    }

    private static final GroupLayout uncapturedErrorCallbackInfo$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("uncapturedErrorCallbackInfo"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * WGPUUncapturedErrorCallbackInfo uncapturedErrorCallbackInfo
     * }
     */
    public static final GroupLayout uncapturedErrorCallbackInfo$layout() {
        return uncapturedErrorCallbackInfo$LAYOUT;
    }

    private static final long uncapturedErrorCallbackInfo$OFFSET = 104;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * WGPUUncapturedErrorCallbackInfo uncapturedErrorCallbackInfo
     * }
     */
    public static final long uncapturedErrorCallbackInfo$offset() {
        return uncapturedErrorCallbackInfo$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * WGPUUncapturedErrorCallbackInfo uncapturedErrorCallbackInfo
     * }
     */
    public static MemorySegment uncapturedErrorCallbackInfo(MemorySegment struct) {
        return struct.asSlice(uncapturedErrorCallbackInfo$OFFSET, uncapturedErrorCallbackInfo$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * WGPUUncapturedErrorCallbackInfo uncapturedErrorCallbackInfo
     * }
     */
    public static void uncapturedErrorCallbackInfo(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, uncapturedErrorCallbackInfo$OFFSET, uncapturedErrorCallbackInfo$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

