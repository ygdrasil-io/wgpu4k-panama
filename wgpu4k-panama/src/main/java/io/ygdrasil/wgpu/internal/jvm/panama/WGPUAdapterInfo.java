// Generated by jextract

package io.ygdrasil.wgpu.internal.jvm.panama;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct WGPUAdapterInfo {
 *     WGPUChainedStructOut *nextInChain;
 *     WGPUStringView vendor;
 *     WGPUStringView architecture;
 *     WGPUStringView device;
 *     WGPUStringView description;
 *     WGPUBackendType backendType;
 *     WGPUAdapterType adapterType;
 *     uint32_t vendorID;
 *     uint32_t deviceID;
 * }
 * }
 */
public class WGPUAdapterInfo {

    WGPUAdapterInfo() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        wgpu_h.C_POINTER.withName("nextInChain"),
        WGPUStringView.layout().withName("vendor"),
        WGPUStringView.layout().withName("architecture"),
        WGPUStringView.layout().withName("device"),
        WGPUStringView.layout().withName("description"),
        wgpu_h.C_INT.withName("backendType"),
        wgpu_h.C_INT.withName("adapterType"),
        wgpu_h.C_INT.withName("vendorID"),
        wgpu_h.C_INT.withName("deviceID")
    ).withName("WGPUAdapterInfo");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout nextInChain$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("nextInChain"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * WGPUChainedStructOut *nextInChain
     * }
     */
    public static final AddressLayout nextInChain$layout() {
        return nextInChain$LAYOUT;
    }

    private static final long nextInChain$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * WGPUChainedStructOut *nextInChain
     * }
     */
    public static final long nextInChain$offset() {
        return nextInChain$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * WGPUChainedStructOut *nextInChain
     * }
     */
    public static MemorySegment nextInChain(MemorySegment struct) {
        return struct.get(nextInChain$LAYOUT, nextInChain$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * WGPUChainedStructOut *nextInChain
     * }
     */
    public static void nextInChain(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(nextInChain$LAYOUT, nextInChain$OFFSET, fieldValue);
    }

    private static final GroupLayout vendor$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("vendor"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * WGPUStringView vendor
     * }
     */
    public static final GroupLayout vendor$layout() {
        return vendor$LAYOUT;
    }

    private static final long vendor$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * WGPUStringView vendor
     * }
     */
    public static final long vendor$offset() {
        return vendor$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * WGPUStringView vendor
     * }
     */
    public static MemorySegment vendor(MemorySegment struct) {
        return struct.asSlice(vendor$OFFSET, vendor$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * WGPUStringView vendor
     * }
     */
    public static void vendor(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, vendor$OFFSET, vendor$LAYOUT.byteSize());
    }

    private static final GroupLayout architecture$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("architecture"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * WGPUStringView architecture
     * }
     */
    public static final GroupLayout architecture$layout() {
        return architecture$LAYOUT;
    }

    private static final long architecture$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * WGPUStringView architecture
     * }
     */
    public static final long architecture$offset() {
        return architecture$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * WGPUStringView architecture
     * }
     */
    public static MemorySegment architecture(MemorySegment struct) {
        return struct.asSlice(architecture$OFFSET, architecture$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * WGPUStringView architecture
     * }
     */
    public static void architecture(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, architecture$OFFSET, architecture$LAYOUT.byteSize());
    }

    private static final GroupLayout device$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("device"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * WGPUStringView device
     * }
     */
    public static final GroupLayout device$layout() {
        return device$LAYOUT;
    }

    private static final long device$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * WGPUStringView device
     * }
     */
    public static final long device$offset() {
        return device$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * WGPUStringView device
     * }
     */
    public static MemorySegment device(MemorySegment struct) {
        return struct.asSlice(device$OFFSET, device$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * WGPUStringView device
     * }
     */
    public static void device(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, device$OFFSET, device$LAYOUT.byteSize());
    }

    private static final GroupLayout description$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("description"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * WGPUStringView description
     * }
     */
    public static final GroupLayout description$layout() {
        return description$LAYOUT;
    }

    private static final long description$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * WGPUStringView description
     * }
     */
    public static final long description$offset() {
        return description$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * WGPUStringView description
     * }
     */
    public static MemorySegment description(MemorySegment struct) {
        return struct.asSlice(description$OFFSET, description$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * WGPUStringView description
     * }
     */
    public static void description(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, description$OFFSET, description$LAYOUT.byteSize());
    }

    private static final OfInt backendType$LAYOUT = (OfInt)$LAYOUT.select(groupElement("backendType"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * WGPUBackendType backendType
     * }
     */
    public static final OfInt backendType$layout() {
        return backendType$LAYOUT;
    }

    private static final long backendType$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * WGPUBackendType backendType
     * }
     */
    public static final long backendType$offset() {
        return backendType$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * WGPUBackendType backendType
     * }
     */
    public static int backendType(MemorySegment struct) {
        return struct.get(backendType$LAYOUT, backendType$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * WGPUBackendType backendType
     * }
     */
    public static void backendType(MemorySegment struct, int fieldValue) {
        struct.set(backendType$LAYOUT, backendType$OFFSET, fieldValue);
    }

    private static final OfInt adapterType$LAYOUT = (OfInt)$LAYOUT.select(groupElement("adapterType"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * WGPUAdapterType adapterType
     * }
     */
    public static final OfInt adapterType$layout() {
        return adapterType$LAYOUT;
    }

    private static final long adapterType$OFFSET = 76;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * WGPUAdapterType adapterType
     * }
     */
    public static final long adapterType$offset() {
        return adapterType$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * WGPUAdapterType adapterType
     * }
     */
    public static int adapterType(MemorySegment struct) {
        return struct.get(adapterType$LAYOUT, adapterType$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * WGPUAdapterType adapterType
     * }
     */
    public static void adapterType(MemorySegment struct, int fieldValue) {
        struct.set(adapterType$LAYOUT, adapterType$OFFSET, fieldValue);
    }

    private static final OfInt vendorID$LAYOUT = (OfInt)$LAYOUT.select(groupElement("vendorID"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t vendorID
     * }
     */
    public static final OfInt vendorID$layout() {
        return vendorID$LAYOUT;
    }

    private static final long vendorID$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t vendorID
     * }
     */
    public static final long vendorID$offset() {
        return vendorID$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t vendorID
     * }
     */
    public static int vendorID(MemorySegment struct) {
        return struct.get(vendorID$LAYOUT, vendorID$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t vendorID
     * }
     */
    public static void vendorID(MemorySegment struct, int fieldValue) {
        struct.set(vendorID$LAYOUT, vendorID$OFFSET, fieldValue);
    }

    private static final OfInt deviceID$LAYOUT = (OfInt)$LAYOUT.select(groupElement("deviceID"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t deviceID
     * }
     */
    public static final OfInt deviceID$layout() {
        return deviceID$LAYOUT;
    }

    private static final long deviceID$OFFSET = 84;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t deviceID
     * }
     */
    public static final long deviceID$offset() {
        return deviceID$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t deviceID
     * }
     */
    public static int deviceID(MemorySegment struct) {
        return struct.get(deviceID$LAYOUT, deviceID$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t deviceID
     * }
     */
    public static void deviceID(MemorySegment struct, int fieldValue) {
        struct.set(deviceID$LAYOUT, deviceID$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

